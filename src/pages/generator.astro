---
import Layout from "../layouts/Layout.astro";
---

<Layout>
  <main class="max-w-5xl mx-auto p-6 space-y-6">
    <h1 class="text-2xl font-bold">SVG Generator</h1>

    <!-- Zone prompt -->
    <div class="flex gap-2">
      <textarea
        id="user-prompt"
        class="textarea textarea-bordered flex-1"
        placeholder="Ex: a red car"></textarea>
      <button id="generate-button" class="btn btn-primary">Generate</button>
      <button id="save-button" class="btn btn-secondary">Save</button>
    </div>

    <!-- Zone d’affichage -->
    <div class="grid md:grid-cols-2 gap-4">
      <pre
        id="svg-output"
        class="bg-gray-100 p-3 rounded overflow-auto text-xs h-80">// The generated SVG code will appear here…</pre>
      <div
        id="svg-container"
        class="bg-white border rounded flex items-center justify-center h-80"
      >
        <span class="text-gray-400">The SVG will be rendered here</span>
      </div>
    </div>
  </main>
</Layout>

<script>
  //@ts-nocheck

  // --- Appel API HuggingFace ---
  async function generateSVG(prompt) {
    console.log("Generating SVG for prompt:", prompt);
    const res = await fetch("/api/generateSVG", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ prompt }),
    });
    const data = await res.json();
    return data.svg;
  }

  // --- Bouton Generate ---
  async function handleSubmit() {
    const promptElement = document.getElementById("user-prompt");
    const generateButton = document.getElementById("generate-button");
    const svgContainer = document.getElementById("svg-container");
    const svgOutput = document.getElementById("svg-output");

    const prompt = promptElement?.value.trim();
    if (!prompt) return;

    // Reset affichage + état bouton
    svgOutput.textContent = "// Generating SVG, please wait...";
    svgContainer.innerHTML = `<span class="loading loading-ring loading-lg"></span>`;
    generateButton.disabled = true;

    try {
      const svgCode = await generateSVG(prompt);
      console.log("svgCode: ", svgCode);

      svgOutput.textContent = svgCode || "// No SVG generated";
      svgContainer.innerHTML =
        svgCode || "<span class='text-gray-400'>No SVG generated</span>";
    } catch (err) {
      console.error(err);
      svgOutput.textContent = "// Error while generating SVG";
      svgContainer.innerHTML =
        "<span class='text-red-500'>Error generating SVG</span>";
    } finally {
      generateButton.disabled = false;
    }
  }

  // --- Bouton Save ---
  async function saveSVG() {
    const svgCode = document.getElementById("svg-output").textContent.trim();
    if (!svgCode || svgCode.startsWith("//")) {
      alert("No SVG to save!");
      return;
    }

    const name = prompt("Enter a name for this SVG:");
    if (!name) return;

    const res = await fetch("/api/saveSVG", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ name, code: svgCode }),
    });

    if (res.ok) {
      alert("✅ SVG saved!");
    } else {
      alert("❌ Error saving SVG");
    }
  }

  // --- Event listeners ---
  document
    .getElementById("generate-button")
    ?.addEventListener("click", handleSubmit);

  document.getElementById("save-button")?.addEventListener("click", saveSVG);
</script>
